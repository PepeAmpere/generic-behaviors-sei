{
  "name": "move & listen",
  "id": "a87ab2be-1a7c-476f-ab03-b93dab0b3d00",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "move to position in column",
      "id": "542e3adc-ef03-430c-8d23-f3a41615d03d",
      "type": "sequence",
      "subtrees": [
        {
          "name": "MSG: NewOrder to soldiers",
          "id": "f10e0f9a-800d-4e92-81c9-f0194579fc06",
          "type": "scriptAction",
          "script": [
            "loc.childElementsInPositions = InternalTable()",
            "local listOfChildElements = orbat.GetChildElements()",
            "local pointman = listOfChildElements[1]",
            "",
            "-- local newOrder = team.Reorder(listOfChildElements, pointman)",
            "",
            "message.SendOrder(",
            "    pointman, -- receiver",
            "    arg.orderData.childElementBtset, -- btset",
            "    \"occupy\", -- behaviorName",
            "    { -- behaviorParameters",
            "        -- mandatory",
            "        position = arg.orderData.position,",
            "        -- optional",
            "    },",
            "    arg.orderData -- copy of current level orderData",
            "    -- presetName (optional)",
            "    -- overrides",
            ")",
            "",
            "loc.childElementsInPositions[pointman] = false",
            "",
            "local previousSoldier = pointman",
            "for i=1, #listOfChildElements do",
            "    local soldier = listOfChildElements[i]",
            "    if soldier ~= pointman then",
            "        message.SendOrder(",
            "            soldier, -- receiver",
            "            arg.orderData.childElementBtset, -- btset",
            "            \"follow\", -- behaviorName",
            "            { -- behaviorParameters",
            "                -- mandatory",
            "                elementToFollow = listOfChildElements[i-1],",
            "                followDistance = arg.orderData.columnSpacing,",
            "                -- optional",
            "            },",
            "            arg.orderData -- copy of current level orderData",
            "            -- presetName (optional)",
            "            -- overrides",
            "        )",
            "        previousSoldier = soldier",
            "    end",
            "end",
            "",
            "-- last guy in column should be followed by others",
            "-- sensor.SetLastValue(arg.orderData.sensors.ElementToFollow, listOfChildElements[#listOfChildElements])"
          ]
        },
        {
          "name": "childElementsInPositions",
          "id": "987f4ebc-931f-48a6-a82e-276078796eeb",
          "type": "waitUntil",
          "condition": [
            "local inPositionCounter = 0",
            "local childElementsCounter = 0",
            "",
            "for childElement, inPosition in pairs(loc.childElementsInPositions) do",
            "    if (childElement:Valid() and childElement:IsAlive()) then",
            "        if (inPosition) then",
            "            inPositionCounter = inPositionCounter + 1",
            "        end",
            "        childElementsCounter = childElementsCounter + 1",
            "    end",
            "end",
            "",
            "return inPositionCounter == childElementsCounter"
          ]
        },
        {
          "name": "MSG: OrderCompleted",
          "id": "1803dac2-f614-4b47-8d5f-296f4b3ec4c3",
          "type": "scriptAction",
          "script": [
            "local receivers = message.MakeListOfReceivers(arg.orderData)",
            "",
            "message.ReportOrderCompleted(receivers, arg.orderData)"
          ]
        }
      ]
    },
    {
      "name": "OrderCompleted",
      "id": "9f242520-b69b-4fde-a183-e5c9fd1784c4",
      "type": "messageHandler",
      "handler": [
        "loc.childElementsInPositions[msg.sender] = message.ValidateOrderCompleted(",
        "    msg, -- full message table",
        "    \"occupy\" -- behaviorName used in MSG sender script action",
        ")"
      ],
      "subject": "OrderCompleted"
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "a87ab2be-1a7c-476f-ab03-b93dab0b3d00",
        "position": "1512.5,511"
      },
      {
        "id": "ab2114f9-cdaa-499f-806c-a4cb7516994b",
        "position": "1487.5,311"
      },
      {
        "id": "02c43832-0392-4cfb-beea-0ac79bebd402",
        "position": "1487.5,398.5"
      },
      {
        "id": "542e3adc-ef03-430c-8d23-f3a41615d03d",
        "position": "1487.5,711"
      },
      {
        "id": "f10e0f9a-800d-4e92-81c9-f0194579fc06",
        "position": "1262.5,836"
      },
      {
        "id": "987f4ebc-931f-48a6-a82e-276078796eeb",
        "position": "1500,836"
      },
      {
        "id": "1803dac2-f614-4b47-8d5f-296f4b3ec4c3",
        "position": "1712.5,836"
      },
      {
        "id": "9f242520-b69b-4fde-a183-e5c9fd1784c4",
        "position": "1737.5,711"
      }
    ],
    "editorObjects": [
      {
        "id": "ab2114f9-cdaa-499f-806c-a4cb7516994b",
        "type": "comment",
        "header": "Pointman exists",
        "body": "Behavior assumes Pointman sensor returns valid value.",
        "bodyAlignment": "Left",
        "headerBackground": "#FFC4AA00",
        "headerForeground": "#FFFFFFFF",
        "boxBackground": "#FFFFD700",
        "boxForeground": "#FF000000",
        "width": 201.0,
        "height": 74.0
      },
      {
        "id": "02c43832-0392-4cfb-beea-0ac79bebd402",
        "type": "comment",
        "header": "Reports success",
        "body": "Behavior is expected to autonomously reports its success to unit requested by order.",
        "bodyAlignment": "Left",
        "headerBackground": "#FF658720",
        "headerForeground": "#FFFFFFFF",
        "boxBackground": "#FF9ACD32",
        "boxForeground": "#FF000000",
        "width": 201.0,
        "height": 87.0
      }
    ],
    "canvasSize": "3840,2861",
    "gridPadding": "0,11"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": ""
    }
  ],
  "locals": {
    "childElementsInPositions": "return nil"
  }
}