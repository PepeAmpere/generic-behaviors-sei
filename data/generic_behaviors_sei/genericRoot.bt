{
  "name": "init and run",
  "id": "36c3e5dc-1ddb-4811-aa53-6bcbb0e38c38",
  "type": "sequence",
  "subtrees": [
    {
      "name": "rulesDefaults",
      "id": "0a348f95-9553-4e01-9031-7ddefc0594ae",
      "type": "scriptAction",
      "script": [
        "bb.rules = {",
        "    roe = 0,",
        "    reactionDistanceTrigger = 180, -- meters",
        "    reactionDistancePursue = 205, -- meters",
        "    usedWeapon = 0,",
        "}"
      ]
    },
    {
      "name": "ordersMapping",
      "id": "79f05ca0-ad55-4b1d-86f0-ef064dcc0873",
      "type": "scriptAction",
      "script": [
        "local ordersMapping = {",
        "    soldier = {",
        "        -- [\"behaviorName\"] = {\"btsetName\", \"treeName\"}",
        "        -- [\"randomMove\"] = {\"generic_behaviors_sei\", \"randomMove\"},",
        "        -- HIGH LEVEL AUTONOMOUS",
        "        [\"follow\"] = {\"generic_behaviors_sei\", \"soldierFollow\"}, -- INPUTS: entity",
        "        [\"observe\"] = {\"generic_behaviors_sei\", \"soldierObserve\"},",
        "        [\"occupy\"] = {\"generic_behaviors_sei\", \"soldierOccupy\"}, --INPUTS: position",
        "",
        "        [\"ugvMove\"] = {\"generic_behaviors_sei\", \"ugvDriverMove\"},",
        "        [\"ugvSpot\"] = {\"generic_behaviors_sei\", \"ugvSpotterAction\"},",
        "                ",
        "        -- LOW LEVEL (without reaction)",
        "        [\"fight\"] = {\"generic_behaviors_sei\", \"soldierFight\"},",
        "        [\"fire\"] = {\"generic_behaviors_sei\", \"soldierFireAtWill\"},",
        "        [\"followEntity\"] = {\"generic_behaviors_sei\", \"soldierFollowEntity\"}, --INPUTS: entity",
        "        [\"followFormation\"] = {\"generic_behaviors_sei\", \"soldierFollowFormation\"},",
        "        [\"genericReaction\"] = {\"generic_behaviors_sei\", \"soldierReaction\"}, --INPUTS: target, boundaries",
        "        [\"idle\"] = {\"generic_behaviors_sei\", \"soldierIdle\"},",
        "        [\"move\"] = {\"generic_behaviors_sei\", \"soldierMove\"}, --INPUTS: position",
        "        [\"switchWeapon\"] = {\"generic_behaviors_sei\", \"soldierSwitchWeapon\"}, -- needs to be tree to enable switching weapons from generic root",
        "    },",
        "    team = {",
        "        -- HIGH LEVEL AUTONOMOUS",
        "        [\"occupy\"] = {\"generic_behaviors_sei\", \"teamDefaultOccupy\"}, --INPUTS: position",
        "        [\"ugvMove\"] = {\"generic_behaviors_sei\", \"ugvGroupOccupy\"}, --INPUTS: position",
        "        ",
        "        -- LOW LEVEL (without reaction)",
        "        [\"follow\"] = {\"generic_behaviors_sei\", \"teamFollowEntityInColumn\"}, --INPUTS: entity",
        "        [\"genericReaction\"] = {\"generic_behaviors_sei\", \"teamGenericReaction\"}, ---INPUTS: target, boundaries",
        "        [\"move\"] = {\"generic_behaviors_sei\", \"teamDefaultOccupy\"}, --INPUTS: position        ",
        "    },",
        "}",
        "",
        "if self.GetEntities then -- we know you are team",
        "    bb.ordersMapping = ordersMapping.team",
        "else",
        "    bb.ordersMapping = ordersMapping.soldier",
        "end"
      ]
    },
    {
      "name": "genericRoot",
      "id": "9afa1a28-460e-4ba9-972b-740754a2f035",
      "type": "supervisedParallel",
      "subtrees": [
        {
          "name": "Wait Forever",
          "id": "c6378205-e6c0-44b3-a23a-9a03babb7bc1",
          "type": "waitForever"
        },
        {
          "name": "NewRule",
          "id": "e5bb4211-bd9f-4a12-a131-984df0a064a1",
          "type": "messageHandler",
          "handler": [
            "local msgValue = msg.value",
            "",
            "local ruleName = msgValue.ruleName",
            "local ruleValue = msgValue.ruleValue",
            "",
            "DebugLog(self .. \" - NEW RULE received: [\" .. ruleName .. \"] = \" .. ruleValue)",
            "",
            "if",
            "    ruleName ~= nil and",
            "    ruleValue ~= nil",
            "then",
            "    -- If the request is for switching weapon and receiver is entity, switch it immediately",
            "    if ruleName == 'usedWeapon' then",
            "        loc.switchWeapon = bb.rules[ruleName] ~= ruleValue",
            "    end",
            "",
            "    bb.rules[ruleName] = ruleValue",
            "end"
          ],
          "subject": "NewRule"
        },
        {
          "name": "NewOrder",
          "id": "2574d24f-a996-4545-940c-54f9548845a4",
          "type": "messageHandler",
          "handler": [
            "loc.newOrderData = msg.value",
            "loc.resetOnNewOrder = true"
          ],
          "subject": "NewOrder"
        },
        {
          "name": "UAVTargets",
          "id": "35ec641a-e74e-4143-a529-6b75780ad1d4",
          "type": "messageHandler",
          "subject": "RegisterTargets",
          "handler": [
            "local msgValue = msg.value",
            "",
            "local targets = msg.value.targets",
            "",
            "if",
            "    targets ~= nil",
            "then",
            "    bb.targets = targets",
            "end"
          ]
        },
        {
          "name": "reset or order",
          "id": "486e08d2-8c27-4f05-95cd-77ad59cb1c41",
          "type": "selector",
          "subtrees": [
            {
              "name": "Reset done",
              "id": "0ba89266-d257-446a-9bbc-9c0ae4f2d295",
              "type": "wait",
              "decorators": [
                {
                  "id": "8c9c3d5d-bc2a-4164-86f2-3090ff81a5af",
                  "type": "valueComparison",
                  "name": "resetOnNewOrder?",
                  "operator": "equal",
                  "lhs": {
                    "type": "local",
                    "key": "resetOnNewOrder"
                  },
                  "rhs": {
                    "type": "boolean",
                    "value": true
                  }
                }
              ],
              "time": [
                "loc.resetOnNewOrder = false",
                "return 1"
              ]
            },
            {
              "name": "\"order branch\"",
              "id": "3df5902e-267d-444f-bcdd-a8d265c160d4",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "pick order",
                  "id": "3dc20cce-706f-429b-aa2e-d562f8799426",
                  "type": "selector",
                  "subtrees": [
                    {
                      "name": "Wait Forever",
                      "id": "0ae0f5d6-43c3-4f38-b540-5490764707e5",
                      "type": "waitForever",
                      "decorators": [
                        {
                          "id": "17d8acbb-ee22-4f99-9150-bd5a2089cc11",
                          "type": "scriptCondition",
                          "name": "no newOrderData",
                          "script": [
                            "return loc.newOrderData == nil"
                          ]
                        }
                      ]
                    },
                    {
                      "name": "Selected behavior",
                      "id": "89309ddd-9238-4e6c-94ca-afbc0c4630b9",
                      "type": "scriptedReference",
                      "target": "return bb.ordersMapping[loc.newOrderData.behaviorName]",
                      "arguments": {
                        "orderData": "return loc.newOrderData"
                      }
                    }
                  ],
                  "active": true
                },
                {
                  "name": "Wait Forever",
                  "id": "6c3460d3-837a-40f0-b7b9-bf13af7d0360",
                  "type": "waitForever"
                }
              ]
            },
            {
              "name": "Fail fallback",
              "id": "38f063bb-e748-4cd5-a113-4750a2215c25",
              "type": "waitForever"
            }
          ],
          "active": true
        },
        {
          "name": "TerrainTypeRequest",
          "id": "59ac6bf1-491d-4c11-9039-4414c2cd04b0",
          "type": "messageHandler",
          "subject": "TerrainTypeRequest",
          "handler": [
            "local position = msg.value.position",
            "local receiver = msg.sender",
            "",
            "local terrainType = EstimateTerrainTypes(position)",
            "",
            "self:SendMessage(",
            "    receiver,",
            "    \"TerrainTypeRequest\",",
            "    {",
            "        terrainType = terrainType,",
            "    }",
            ")"
          ]
        },
        {
          "name": "Switch weapon logic",
          "id": "56efc338-605f-4867-8a00-b855354446f9",
          "type": "selector",
          "subtrees": [
            {
              "name": "Weapon switching",
              "id": "a2f9de9f-564c-4e70-91f8-9f1ec35532a8",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "Wait for switch request",
                  "id": "59afda67-e350-4dec-b60a-fff6d003578f",
                  "type": "waitUntil",
                  "condition": [
                    "return loc.switchWeapon"
                  ]
                },
                {
                  "name": "Switch weapon",
                  "id": "562af1b0-523a-462a-bb6e-4be562f7d1d3",
                  "type": "scriptedReference",
                  "target": "return bb.ordersMapping.switchWeapon",
                  "arguments": {}
                },
                {
                  "name": "Clear variable",
                  "id": "9ba8a62f-886a-4d91-a41e-c9f3b1999bd5",
                  "type": "scriptAction",
                  "script": [
                    "loc.switchWeapon = false"
                  ]
                }
              ],
              "decorators": [
                {
                  "id": "eaa91446-388d-4a7f-a498-157f8bda1e2c",
                  "type": "scriptCondition",
                  "name": "Is soldier?",
                  "script": [
                    "return (not self.GetEntities)"
                  ]
                }
              ]
            },
            {
              "name": "Wait Forever",
              "id": "f94df04c-900e-4624-83ed-2b348ef7dd55",
              "type": "waitForever"
            }
          ],
          "active": false
        }
      ]
    }
  ],
  "unlinked-trees": [
    {
      "name": "orderData",
      "id": "d73bc2dc-13cf-4f95-bd2f-8dfecc21089b",
      "type": "waitUntil",
      "meta": {
        "nodesInfo": [
          {
            "id": "d73bc2dc-13cf-4f95-bd2f-8dfecc21089b",
            "position": "3062.5,642.5"
          }
        ],
        "editorObjects": []
      },
      "condition": [
        "return loc.orderData ~= nil"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "36c3e5dc-1ddb-4811-aa53-6bcbb0e38c38",
        "position": "2075,342.5"
      },
      {
        "id": "daa574b2-6709-4a1e-96ad-8464aa834209",
        "position": "1787.5,667.5"
      },
      {
        "id": "2193dc6b-d31d-4884-ab8a-0d6c2c9651ad",
        "position": "2312.5,617.5"
      },
      {
        "id": "0c29c5c7-0d73-47ef-acd1-7933ada79042",
        "position": "2662.5,367.166666666667"
      },
      {
        "id": "0a348f95-9553-4e01-9031-7ddefc0594ae",
        "position": "1675,405",
        "height": 50.0
      },
      {
        "id": "79f05ca0-ad55-4b1d-86f0-ef064dcc0873",
        "position": "1862.5,405"
      },
      {
        "id": "9afa1a28-460e-4ba9-972b-740754a2f035",
        "position": "2075,467.5"
      },
      {
        "id": "c6378205-e6c0-44b3-a23a-9a03babb7bc1",
        "position": "1237.5,542.5"
      },
      {
        "id": "e5bb4211-bd9f-4a12-a131-984df0a064a1",
        "position": "1462.5,542.5"
      },
      {
        "id": "2574d24f-a996-4545-940c-54f9548845a4",
        "position": "1675,542.5"
      },
      {
        "id": "35ec641a-e74e-4143-a529-6b75780ad1d4",
        "position": "1887.5,542.5"
      },
      {
        "id": "486e08d2-8c27-4f05-95cd-77ad59cb1c41",
        "position": "2075,592.5"
      },
      {
        "id": "0ba89266-d257-446a-9bbc-9c0ae4f2d295",
        "position": "1825,742.5"
      },
      {
        "id": "3df5902e-267d-444f-bcdd-a8d265c160d4",
        "position": "2075,705"
      },
      {
        "id": "3dc20cce-706f-429b-aa2e-d562f8799426",
        "position": "2075,855"
      },
      {
        "id": "0ae0f5d6-43c3-4f38-b540-5490764707e5",
        "position": "1862.5,992.5"
      },
      {
        "id": "89309ddd-9238-4e6c-94ca-afbc0c4630b9",
        "position": "2075,992.5"
      },
      {
        "id": "6c3460d3-837a-40f0-b7b9-bf13af7d0360",
        "position": "2337.5,855"
      },
      {
        "id": "38f063bb-e748-4cd5-a113-4750a2215c25",
        "position": "2337.5,742.5"
      },
      {
        "id": "59ac6bf1-491d-4c11-9039-4414c2cd04b0",
        "position": "2287.5,542.5"
      },
      {
        "id": "56efc338-605f-4867-8a00-b855354446f9",
        "position": "2725,555"
      },
      {
        "id": "a2f9de9f-564c-4e70-91f8-9f1ec35532a8",
        "position": "2637.5,655"
      },
      {
        "id": "59afda67-e350-4dec-b60a-fff6d003578f",
        "position": "2550,817.5"
      },
      {
        "id": "562af1b0-523a-462a-bb6e-4be562f7d1d3",
        "position": "2750,817.5"
      },
      {
        "id": "9ba8a62f-886a-4d91-a41e-c9f3b1999bd5",
        "position": "2925,817.5"
      },
      {
        "id": "f94df04c-900e-4624-83ed-2b348ef7dd55",
        "position": "2825,655"
      }
    ],
    "editorObjects": [
      {
        "id": "daa574b2-6709-4a1e-96ad-8464aa834209",
        "type": "comment",
        "header": "Active 1 frame to reset subtree",
        "body": "Put breakpoint on Wait to handle new order received (loc.orderData).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nDue nature of selector it is enough that \"order branch\" is not running at least 1 one frame => all context (local variables, passed values) is cleaned up.",
        "bodyAlignment": "Left",
        "headerBackground": "#FFFFD700",
        "headerForeground": "#FF000000",
        "boxBackground": "#FFC0C0C0",
        "boxForeground": "#FF000000",
        "width": 223.0,
        "height": 252.0
      },
      {
        "id": "2193dc6b-d31d-4884-ab8a-0d6c2c9651ad",
        "type": "comment",
        "header": "Prevents whole tree fails",
        "body": "For debugging and also for the context pruposes this safety node prevents fail of whole \"order branch\" of the tree. Potential unwanted failes are catched here.",
        "bodyAlignment": "Left",
        "headerBackground": "#FF808080",
        "headerForeground": "#FFFFFFFF",
        "boxBackground": "#FFFFFFFF",
        "boxForeground": "#FF000000",
        "width": 191.0,
        "height": 190.0
      },
      {
        "id": "0c29c5c7-0d73-47ef-acd1-7933ada79042",
        "type": "comment",
        "header": "Switch weapon logic",
        "body": "Logic for weapon switching, it has to be in the root so it can be switched instantly in parallel with any correcntly running behavior. First passive check determine at the beginning if the brain is group or soldier. For soldiers than switches weapons after request. Switch has to be done by scripted reference, because otherwise the behavior would be incompatible with group brain bz using \"switch weapon\" node.",
        "bodyAlignment": "Left",
        "width": 332.33333333333326,
        "height": 256.13333333333338,
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      }
    ],
    "canvasSize": "3840,2730",
    "gridPadding": "0,5"
  },
  "parameters": [],
  "locals": {
    "newOrderData": "return nil",
    "resetOnNewOrder": "return false",
    "terType": "return nil",
    "sender": "return nil",
    "switchWeapon": "return false"
  }
}