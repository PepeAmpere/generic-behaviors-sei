{
  "name": "Gunner behavior",
  "id": "1aa472a4-f64c-40db-8a32-d99809596fd1",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "Wait Forever",
      "id": "0f5d0405-e9bb-4fa9-b2a3-d1225d8e72e7",
      "type": "waitForever"
    },
    {
      "name": "Look for enemy",
      "id": "11165411-1072-4043-9123-12aa8dc1e735",
      "type": "scriptAction",
      "script": [
        "self:SetVisibilityRange(400)",
        "local enemies = self:GetVisibleEnemies(400)",
        "",
        "loc.currentTargetIsVehicle = false",
        "",
        "if (#enemies > 0) then",
        "    -- If the vehicle has anti-vehicle ability, filter the enemies for vehicles before shooting at units",
        "    if (arg.orderData.isAntiVehicle) then",
        "        for i = 1, #enemies do",
        "            if (enemies[i]:GetType() == EntityType.Vehicle) then",
        "                if ((arg.orderData.hasMainCannon ~= nil) or (arg.orderData.hasLaser ~= nil) or (arg.orderData.hasMissiles ~= nil and (self:GetPosition():Distance(enemies[i]:GetPosition()) > 50))) then",
        "                    if (arg.orderData.hasLaser ~= nil) then",
        "                        if (enemies[i]:IsKindOf(\"vbs2_uav_x\") or enemies[i]:IsKindOf(\"vbs2_helicopter_uav_x\") or enemies[i]:IsKindOf(\"vbs2_uav\")) then",
        "                            if (self:IsClearSightTo(enemies[i]:GetAimPoint())) then",
        "                                loc.currentTarget = enemies[i]",
        "                                loc.currentTargetIsVehicle = true",
        "                                break",
        "                            end",
        "                        end",
        "                    else",
        "                        if (self:IsClearSightTo(enemies[i]:GetAimPoint())) then",
        "                            loc.currentTarget = enemies[i]",
        "                            loc.currentTargetIsVehicle = true",
        "                            break",
        "                        end",
        "                    end",
        "                end",
        "            end",
        "        end",
        "    end",
        "",
        "    if (not loc.currentTargetIsVehicle) then",
        "        for i = 1, #enemies do",
        "            if (self:IsClearSightTo(enemies[i]:GetAimPoint())) then",
        "                if  (enemies[i]:GetType() == EntityType.Person and (self:GetPosition():Distance(enemies[i]:GetPosition()) < 600)) then",
        "                    loc.currentTarget = enemies[i]",
        "                    break",
        "                end",
        "            end",
        "        end",
        "    end",
        "else",
        "    loc.currentTarget = nil",
        "    self:ReqHeadingFormationIfStationary()",
        "end"
      ]
    },
    {
      "name": "engage target",
      "id": "a689e868-ebf7-4ae1-b71b-a0357758a8e5",
      "type": "sequence",
      "subtrees": [
        {
          "name": "send halt msg",
          "id": "5cc95d57-f169-4394-96bd-ffdbf303672b",
          "type": "scriptAction",
          "script": [
            "self:SendMessage(",
            "    arg.orderData.parent,",
            "    'Halt',",
            "    {",
            "        halt = true",
            "    }",
            ")",
            "",
            "local ammoMonitor = self:GetOwnCrewPosition():GetCurrentMagazine().rounds",
            "local magazineMonitor = self:GetWeaponMagazines(self:GetOwnCrewPosition():GetCurrentWeapon())",
            "",
            "if (ammoMonitor < 1 and not loc.outOfAmmo and #magazineMonitor == 0) then",
            "    loc.outOfAmmo = true",
            "end"
          ]
        },
        {
          "name": "select weapon",
          "id": "7b65e834-c559-48c1-beb9-042bb120bd60",
          "type": "selectWeapon",
          "weapon": [
            "if (arg.orderData.hasLaser ~= nil) then",
            "    return arg.orderData.hasLaser",
            "else",
            "    if (loc.currentTargetIsVehicle and (arg.orderData.hasMissiles ~= nil or arg.orderData.hasMainCannon ~= nil)) then",
            "        if (arg.orderData.hasMissiles ~= nil) then",
            "            return arg.orderData.hasMissiles",
            "        else",
            "            return arg.orderData.hasMainCannon",
            "        end",
            "    else",
            "        if (loc.currentTargetIsVehicle and arg.orderData.hasMissiles ~= nil) then",
            "            return arg.orderData.hasMissiles",
            "        else",
            "            return arg.orderData.hasMachinegun",
            "        end",
            "    end",
            "end"
          ]
        },
        {
          "name": "Aim at tgt",
          "id": "825a3487-644d-446d-9cdf-0339938a9e94",
          "type": "scriptAction",
          "script": [
            "bb[\"currentTarget\"] = loc.currentTarget",
            "",
            "self:ReqHeadingAimAtEntity(loc.currentTarget, 1)"
          ]
        },
        {
          "name": "Shoot at tgt",
          "id": "cee1c4e0-9505-48d2-8ceb-d08d34d34348",
          "type": "fire",
          "decorators": [
            {
              "id": "fc3f220f-30b9-4962-82ab-e30195f1276a",
              "type": "scriptCondition",
              "name": "Line of sight?",
              "script": [
                "if (self:IsClearSightTo(loc.currentTarget:GetAimPoint()) and loc.currentTarget:IsAlive()) then",
                "--[[local _distance = self:GetMuzzlePoint():Distance(loc.currentTarget:GetAimPoint())",
                "self:HasClearShot(_distance -1)",
                "if (self:HasClearShot(_distance)) then]]--  ",
                "    return true",
                "else",
                "    loc.currentTarget = nil",
                "    return false",
                "end"
              ]
            }
          ],
          "rounds": [
            "return 1"
          ]
        },
        {
          "name": "Wait",
          "id": "47a15330-f49d-4277-b1a6-29a8a20f7b0e",
          "type": "wait",
          "time": [
            "1"
          ]
        }
      ],
      "decorators": [
        {
          "id": "a81b6fb7-86b1-421c-af78-47dbccca95f6",
          "type": "succeeder",
          "name": "Always Succeed"
        },
        {
          "id": "f2e8cd39-e02d-48d9-831b-1728cad69969",
          "type": "scriptCondition",
          "name": "currentTarget ~= nil",
          "script": [
            "return (loc.currentTarget ~= nil and (not loc.outOfAmmo))"
          ]
        },
        {
          "id": "dcd1b6dc-8488-4558-8a57-2bb7353fd3b1",
          "type": "scriptCondition",
          "name": "wpn/tgt match?",
          "script": [
            "return (loc.currentTargetIsVehicle and arg.orderData.isAntiVehicle) or ((not loc.currentTargetIsVehicle) and arg.orderData.isAntiPersonnel)"
          ]
        }
      ]
    },
    {
      "name": "send no tgts message",
      "id": "84da66f2-3555-49fb-958b-1bbb98a3b1d1",
      "type": "sequence",
      "subtrees": [
        {
          "name": "remove halt",
          "id": "3d3bc48c-38fe-4b9a-ab8d-818127db90e9",
          "type": "scriptAction",
          "script": [
            "-- Send message to group so that driver can continue",
            "self:SendMessage(",
            "    arg.orderData.parent,",
            "    'Halt',",
            "    {",
            "        halt = false",
            "    }",
            ")"
          ]
        },
        {
          "name": "Wait Forever",
          "id": "b35011de-aee7-4516-848d-7b210c2786e5",
          "type": "waitForever"
        }
      ],
      "decorators": [
        {
          "id": "9d2ff8fc-13cf-4ae0-b936-c9cea873f15e",
          "type": "succeeder",
          "name": "Always Succeed"
        },
        {
          "id": "bb721fe3-11ee-4c37-8391-67198ed49d7d",
          "type": "scriptCondition",
          "name": "currentTarget == nil",
          "script": [
            "return (loc.currentTarget == nil or loc.outOfAmmo)"
          ]
        }
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "1aa472a4-f64c-40db-8a32-d99809596fd1",
        "position": "1800,1208.5"
      },
      {
        "id": "0f5d0405-e9bb-4fa9-b2a3-d1225d8e72e7",
        "position": "1475,1358.5"
      },
      {
        "id": "11165411-1072-4043-9123-12aa8dc1e735",
        "position": "1637.5,1358.5"
      },
      {
        "id": "a689e868-ebf7-4ae1-b71b-a0357758a8e5",
        "position": "1800,1358.5"
      },
      {
        "id": "5cc95d57-f169-4394-96bd-ffdbf303672b",
        "position": "1175,1596"
      },
      {
        "id": "7b65e834-c559-48c1-beb9-042bb120bd60",
        "position": "1337.5,1596",
        "width": 145.0
      },
      {
        "id": "825a3487-644d-446d-9cdf-0339938a9e94",
        "position": "1500,1596",
        "width": 145.0
      },
      {
        "id": "cee1c4e0-9505-48d2-8ceb-d08d34d34348",
        "position": "1662.5,1596"
      },
      {
        "id": "47a15330-f49d-4277-b1a6-29a8a20f7b0e",
        "position": "1825,1596"
      },
      {
        "id": "84da66f2-3555-49fb-958b-1bbb98a3b1d1",
        "position": "1975,1358.5"
      },
      {
        "id": "3d3bc48c-38fe-4b9a-ab8d-818127db90e9",
        "position": "1987.5,1596"
      },
      {
        "id": "b35011de-aee7-4516-848d-7b210c2786e5",
        "position": "2162.5,1596"
      }
    ],
    "editorObjects": [],
    "canvasSize": "3840,3546",
    "gridPadding": "0,8.5"
  },
  "parameters": [
    {
      "name": "actionData",
      "isOptional": false,
      "defaultValue": ""
    },
    {
      "name": "orderData",
      "isOptional": false
    }
  ],
  "locals": {
    "currentTarget": "return nil",
    "outOfAmmo": "return false",
    "currentTargetIsVehicle": "return false"
  }
}